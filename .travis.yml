# This file configures the build and run environment on https://travis-ci.org/

# Specify the operating systems on which to test for.
os:
  - linux

# For details on building a C++ project see: https://docs.travis-ci.com/user/languages/cpp/
language: cpp

# Specifiy which compiler or compilers to test against.
# For details, see https://docs.travis-ci.com/user/languages/cpp/#Choosing-compilers-to-test-against
compiler:
  - clang
  - gcc

# Define build environment variables.
# Each variable causes an individual build.
env:
  - REALNUM_TYPE=float
  - REALNUM_TYPE=double

# Specify explicitly which branches to build or not build
# For details see: https://docs.travis-ci.com/user/customizing-the-build/#Building-Specific-Branches
branches:
  only:
  - dev

# Specify which OS X image to use.
# "xcode8" is supposed to provide a macosx10.11 SK preinstalled.
# For details see: https://docs.travis-ci.com/user/osx-ci-environment/
osx_image: xcode8

xcode_project: Build/xcode5/Box2D.xcodeproj
xcode_scheme: UnitTest

sudo: false

# https://cmake.org/files/v3.7/cmake-3.7.2-Linux-x86_64.tar.gz

# Specify which "apt" packages to install/update.
# For white-listed aliases, see https://github.com/travis-ci/apt-source-whitelist/blob/master/ubuntu.json
#
# Ideally there are usable packages for GLFW version 3 or GLEW version 2 but
# I haven't found usable ones. The closest I got was from a source that
# appeared to cause package conflicts. So these are dealt with later in the
# install stage by downloading, building and installing them the manual way.
#
addons:
  apt:
    sources:
      - deadsnakes
      - ubuntu-toolchain-r-test
      - george-edison55-precise-backports
      - llvm-toolchain-precise-3.7
    packages:
      - build-essential
      - cmake
      - cmake-data
      - clang-3.7
      - g++-6
      - gcc-6
      - xorg-dev
      - libx11-dev
      - libXmu-dev
      - libXi-dev
      - libgl1-mesa-dev
      - libosmesa-dev
      - lcov

before_install:
  - gem install coveralls-lcov

# Install stage. Setup dependencies that can't be setup as addon packages.
#
# I'd prefer that GLFW and GLEW get installed as packages but I didn't find
# usable packages for GLFW version 3 (or newer) and GLEW version 2 (or newer).
# Both of which are required for the Box2D Testbed and ONLY the Testbed.
#
# Additional notes:
# Linux seems to usually support "sha256sum". OS X meanwhile calls it "shasum".
# For dumping compiler macros: $CXX -dM -E - < /dev/null | sort
#
install:
  - if [ "$CXX" = "g++" ]; then export CXX="g++-6" CC="gcc-6"; fi
  - if [ "$CXX" = "clang++" ]; then export CXX="clang++-3.7" CC="clang-3.7"; fi
  - echo CXX=$CXX HOME=$HOME TRAVIS_BUILD_DIR=$TRAVIS_BUILD_DIR && cmake --version && export SOURCE_ROOT="${TRAVIS_BUILD_DIR}" BUILD_ROOT="${TRAVIS_BUILD_DIR}-Build" && BOX2D_BUILD_OPTIONS="-DBOX2D_BUILD_UNIT_TESTS=ON -DBOX2D_BUILD_HELLOWORLD=ON -DBOX2D_BUILD_TESTBED=ON"
  - if [ "${REALNUM_TYPE}foo" != "foo" ]; then BOX2D_BUILD_OPTIONS="$BOX2D_BUILD_OPTIONS  -DBOX2D_REALNUM_TYPE=$REALNUM_TYPE"; fi && echo $BOX2D_BUILD_OPTIONS
  - git clone https://github.com/louis-langholtz/units.git && wget https://sourceforge.net/projects/boost/files/boost/1.63.0/boost_1_63_0.tar.bz2 -O /tmp/boost_1_63_0.tar.bz2 && sha256sum /tmp/boost_1_63_0.tar.bz2 && echo "Expect SHA256 Hash of beae2529f759f6b3bf3f4969a19c2e9d6f0c503edcb2de4a61d1428519fcb3b0" && export BOOST_INC_DST=/tmp/boost_1_63_0/include/boost BOOST_SRC=$HOME/boost-src && mkdir -p $BOOST_SRC $BOOST_INC_DST && pushd $BOOST_SRC && tar --bzip2 -xf /tmp/boost_1_63_0.tar.bz2 && cp -a boost_1_63_0/boost/* $BOOST_INC_DST && popd && pushd $BOOST_INC_DST && mv units units.old && ln -s $HOME/units/include/boost/units . && popd
  - export GLFW_URL=https://github.com/glfw/glfw/releases/download/3.2.1/glfw-3.2.1.zip && mkdir /tmp/glfw && pushd /tmp/glfw && curl --location --remote-name $GLFW_URL && md5sum *.zip && echo "Expect MD5 hash of 824c99eea073bdd6d2fec76b538f79af" && unzip -q *.zip && rm *.zip && mkdir ../glfw-build && cd ../glfw-build && cmake -DCMAKE_INSTALL_PREFIX=/tmp/usr ../glfw/* && make && make install && popd
  - export GLEW_URL=https://sourceforge.net/projects/glew/files/glew/2.0.0/glew-2.0.0.zip && mkdir /tmp/glew && pushd /tmp/glew && curl --location --remote-name $GLEW_URL && md5sum *.zip && echo "Expect MD5 hash of 54c913d0c00726fb028d089ad1664ede" && unzip -q *.zip && rm *.zip && cd * && make && make DESTDIR=/tmp install && popd

script:
  - if [[ "$TRAVIS_OS_NAME" == "linux" && "$CXX" == "clang++-3.7" ]]; then (pwd && mkdir -p $BUILD_ROOT && cd $BUILD_ROOT && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=/tmp/usr -DCMAKE_LIBRARY_PATH=/tmp/usr/lib $BOX2D_BUILD_OPTIONS $SOURCE_ROOT && make && cd UnitTests && ./UnitTests --gtest_filter=-Dump.OneBodyWorld:StackAllocator.slower_than_mallocfree ); fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" && "$CXX" == "g++-6" ]]; then (pwd && mkdir -p $BUILD_ROOT && cd $BUILD_ROOT && cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_PREFIX_PATH=/tmp/usr -DCMAKE_LIBRARY_PATH=/tmp/usr/lib $BOX2D_BUILD_OPTIONS $SOURCE_ROOT && make && cd UnitTests && ./UnitTests --gtest_filter=-Dump.OneBodyWorld:StackAllocator.slower_than_mallocfree ); fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then (cd Box2D && xcodebuild -project Build/xcode5/Box2D.xcodeproj -list); fi

after_success:
  - |
    lcov --directory UnitTests --base-directory ../Box2D/ --capture --output-file coverage.info
    lcov --remove coverage.info '*/UnitTests/*' -o coverage.info
    cd .. && coveralls-lcov build/coverage.info
